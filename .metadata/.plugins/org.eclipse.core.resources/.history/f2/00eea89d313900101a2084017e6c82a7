package com.movie.service;

import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.movie.dto.GenreDTO;
import com.movie.dto.GenreResponse;
import com.movie.entity.Genre;
import com.movie.repository.GenreRepository;
import com.movie.util.MovieServiceConstants;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class GenreService {

	@Autowired
	private GenreRepository genreRepository;

	@Autowired
	private RestTemplate restTemplate;

	public List<GenreDTO> getAllAvailablesGenres() {
		log.info("Fetching all genres from local database");

		List<Genre> genreList = genreRepository.findAll();

		log.info("Genres fetched from DB: {}", genreList);

		// If DB is empty, fallback to fetch from external API
		if (genreList.isEmpty()) {
			log.info("No genres found in DB, calling external API to fetch genres");

			List<GenreDTO> allAvailablesGenresExternal = getAllAvailablesGenresExternal();

			if (!allAvailablesGenresExternal.isEmpty()) {
				log.info("Received {} genres from external API, saving to database",
						allAvailablesGenresExternal.size());

				// Map DTO to entity and save each one
				allAvailablesGenresExternal.stream().map(genreDto -> Genre.builder().genreName(genreDto.getGenreName())
						.officialGenreId(genreDto.getOfficialGenreId()).build()).forEach(genreEntity -> {
							genreRepository.save(genreEntity);
							log.debug("Saved genre: {}", genreEntity);
						});
			} else {
				log.warn("External API returned no genres");
			}
		}

		// Refresh from DB after possibly saving external genres
		genreList = genreRepository.findAll();
		log.info("Returning {} genres from database after refresh", genreList.size());

		// Map entity to DTO and return
		return genreList.stream().map(genre -> new GenreDTO(genre.getGenreName(), genre.getOfficialGenreId())).toList();
	}

	public List<GenreDTO> getAllAvailablesGenresExternal() {
		try {
			log.info("Starting to fetch genres from TMDb API");

			String url = "https://api.themoviedb.org/3/genre/movie/list?language=en";

			HttpHeaders headers = new HttpHeaders();
			headers.set("accept", "application/json");
			headers.set("Authorization", "Bearer " + MovieServiceConstants.TMDB_ACCESS_TOKEN);

			HttpEntity<String> entity = new HttpEntity<>(headers);

			ResponseEntity<GenreResponse> response = restTemplate.exchange(url, HttpMethod.GET, entity,
					GenreResponse.class);

			log.info("Successfully fetched genres from TMDb API, total genres: {}",
					response.getBody().getGenres().size());

			return response.getBody().getGenres().stream().map(i -> new GenreDTO(i.getName(), i.getId()))
					.collect(Collectors.toList());

		} catch (Exception e) {
			log.error("Failed to fetch genres from TMDb API", e);
			return Collections.emptyList();
		}
	}

}
